# Generated by Django 4.0.4 on 2023-05-21 17:47

import ckeditor.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PersMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titl', models.CharField(max_length=255, verbose_name='Title')),
                ('urll', models.CharField(max_length=255, verbose_name='URL')),
                ('phot', models.ImageField(blank=True, null=True, upload_to='photos/%Y/%m/%d', verbose_name='Фото пользователя')),
                ('publ', models.BooleanField(default=False, verbose_name='Published')),
                ('grou', models.ManyToManyField(related_name='persmenu', to='auth.group', verbose_name='Groups')),
            ],
        ),
        migrations.CreateModel(
            name='Info',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titl', models.CharField(max_length=255, verbose_name='Title')),
                ('desc', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('cont', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='Content')),
                ('phot', models.ImageField(blank=True, null=True, upload_to='photos/%Y/%m/%d', verbose_name='Фото пользователя')),
                ('dele', models.BooleanField(blank=True, default=False, null=True, verbose_name='Deleted')),
                ('publ', models.BooleanField(blank=True, default=False, null=True, verbose_name='Published')),
                ('auth', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='info', to='app_site.info', verbose_name='Author')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('patr_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Отчество')),
                ('toke', models.CharField(blank=True, max_length=255, null=True, verbose_name='Токен для проверки')),
                ('phon', models.CharField(blank=True, max_length=15, null=True, verbose_name='Телефон')),
                ('phot', models.ImageField(blank=True, null=True, upload_to='photos/%Y/%m/%d', verbose_name='Фото пользователя')),
                ('dele', models.BooleanField(blank=True, default=False, null=True, verbose_name='Deleted')),
                ('auth', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='auth_user', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
